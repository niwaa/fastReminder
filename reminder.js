import React from 'react'
import { AsyncStorage } from 'react-native'

var PushNotification = require('react-native-push-notification')

var moment = require('moment')

let instance = null

class Reminder {
  constructor () {
    if (!instance) {
      instance = this
    }
    return instance
  }

  addReminder (comment, dateObject) {
    let finalComment = comment || 'no title'
    let dateJs = moment(dateObject).toDate()
    let id = Date.now()
    let _this = this
    console.log('addReminder', dateObject, dateJs)
    return new Promise((resolve, reject) => {
      this.addReminderToStore(id, finalComment, dateObject)
        .then(function () {
          _this.addPushNotification(id, finalComment, dateJs)
          resolve()
        })
        .catch(function (error) {
          reject(error)
        })
    })
  }

  addPushNotification (id, comment, dateJs) {
    PushNotification.localNotificationSchedule({
    /* Android Only Properties */
      id: id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: 'xxx', // (optional)
      autoCancel: false, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: 'ic_launcher'
      smallIcon: 'ic_notification', // (optional) default: 'ic_notification' with fallback for 'ic_launcher'
      bigText: comment, // (optional) default: 'message' prop
      subText: 'This is a subText', // (optional) default: none
      color: 'red', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an 'ongoing' notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: 'Flash Reminder', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
      message: comment, // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // number: '666', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      repeatType: null, // 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
      actions: '["30min", "Edit", "Dismiss"]',  // (Android only) See the doc for notification actions to know more
      date: dateJs // new Date(Date.now() + (10 * 1000)) // in 60 secs
    })
  }

  async addReminderToStore (id, comment, dateObject) {
    const storeKey = 'reminders'
    try {
      const value = await AsyncStorage.getItem(storeKey)
      var array
      let item = {
        id: id,
        comment: comment,
        dateObject: dateObject
      }

      if (value !== null) {
        array = JSON.parse(value).concat([item])
      } else {
        array = [item]
      }

      AsyncStorage.setItem(storeKey, JSON.stringify(array))
       .then(json => {
         return true
       })
       .catch(error => {
         console.log(error)
       })
    } catch (error) {
      console.log(error)
    }
  }
}

module.exports = Reminder
